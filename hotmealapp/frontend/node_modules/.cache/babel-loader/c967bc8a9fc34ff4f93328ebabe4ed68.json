{"ast":null,"code":"var _jsxFileName = \"/Users/shixinyi/Desktop/6080/ass3/frontend/src/pages/Editquiz.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Card, Row, Col, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Editquiz() {\n  _s();\n\n  const params = useParams();\n  const id = params.quizid;\n  const token = localStorage.getItem('token');\n\n  const getquiz = async id => {\n    const response = await fetch('http://localhost:5005/admin/quiz/' + id, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    });\n    const data = await response.json();\n    const questions = data.questions;\n    localStorage.setItem('questions', JSON.stringify(questions));\n  };\n\n  getquiz(id);\n\n  const fresh = async () => {\n    await getquiz();\n    quizzes = JSON.parse(localStorage.getItem('questions'));\n    location.reload();\n  };\n\n  const questions = JSON.parse(localStorage.getItem('questions'));\n\n  const deleteQuestion = async id => {\n    questions.map((value, index) => {\n      if (value.id === id) {\n        questions.splice(index, 1);\n      }\n    });\n    await fetch('http://localhost:5005/admin/quiz/' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + token\n      },\n      body: JSON.stringify({\n        questions\n      })\n    });\n    fresh();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      xs: 1,\n      md: 4,\n      className: \"g-4\",\n      children: questions.map(question => /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: quiz.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: question.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"question: \", question.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"time limit: \", question.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"value \", question.value]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"answer: \", question.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-primary\",\n              size: \"sm\",\n              href: `/editquestion:${question.id}`,\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-secondary\",\n              size: \"sm\",\n              onClick: deleteQuestion(question.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"question/new\",\n      children: \"Create new question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Editquiz, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c = Editquiz;\nexport default Editquiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editquiz\");","map":{"version":3,"sources":["/Users/shixinyi/Desktop/6080/ass3/frontend/src/pages/Editquiz.jsx"],"names":["React","useParams","Link","Card","Row","Col","Button","Editquiz","params","id","quizid","token","localStorage","getItem","getquiz","response","fetch","method","headers","Authorization","data","json","questions","setItem","JSON","stringify","fresh","quizzes","parse","location","reload","deleteQuestion","map","value","index","splice","body","question","quiz","image","type","text","time","answer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport {\n  Card,\n  Row,\n  Col,\n  Button\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Editquiz () {\n  const params = useParams();\n  const id = params.quizid\n  const token = localStorage.getItem('token');\n  const getquiz = async (id) => {\n    const response = await fetch('http://localhost:5005/admin/quiz/' + id, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + token,\n      }\n    })\n    const data = await response.json();\n    const questions = data.questions\n    localStorage.setItem('questions', JSON.stringify(questions))\n  }\n  getquiz(id)\n  const fresh = async () => {\n    await getquiz()\n    quizzes = JSON.parse(localStorage.getItem('questions'))\n    location.reload()\n  }\n  const questions = JSON.parse(localStorage.getItem('questions'))\n  const deleteQuestion = async (id) => {\n    questions.map((value, index) => {\n      if (value.id === id) {\n        questions.splice(index, 1)\n      }\n    })\n    await fetch('http://localhost:5005/admin/quiz/' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: 'Bearer ' + token,\n      },\n      body: JSON.stringify({ questions })\n    })\n    fresh()\n  }\n  \n  return <>\n    <h1>Edit quiz</h1>\n    <Row xs={1} md={4} className=\"g-4\">\n        {questions.map(question => (\n          <Col key={question.id}>\n            <Card>\n              <Card.Img variant=\"top\" src={quiz.image} />\n              <Card.Body>\n                <Card.Title>{question.type}</Card.Title>\n                <Card.Text>\n                  question: {question.text}\n                </Card.Text>\n                <Card.Text>\n                  time limit: {question.time}\n                </Card.Text>\n                <Card.Text>\n                  value {question.value}\n                </Card.Text>\n                <Card.Text>\n                  answer: {question.answer}\n                </Card.Text>\n                <Button variant=\"outline-primary\" size=\"sm\" href={`/editquestion:${question.id}`}>Edit</Button>\n                <br />\n                <Button variant=\"outline-secondary\" size=\"sm\" onClick={deleteQuestion(question.id)}>Delete</Button>\n              </Card.Body>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      <br />\n      <Link to='question/new'>Create new question</Link>\n  </>\n}\nexport default Editquiz;\n"]},"metadata":{},"sourceType":"module"}